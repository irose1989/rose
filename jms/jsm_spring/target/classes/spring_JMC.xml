<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-3.2.xsd">

    <context:component-scan base-package="service.*" />
    <!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供-->
    <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="tcp://localhost:61616"/>
    </bean>
    <!--ActiveMQ为我们提供了一个PooledConnectionFactory，
    通过往里面注入一个ActiveMQConnectionFactory可以用来将Connection、Session和MessageProducer池化，
    这样可以大大的减少我们的资源消耗。-->
    <!--<bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">-->
        <!--<property name="connectionFactory" ref="targetConnectionFactory"/>-->
        <!--<property name="maxConnections" value="10"/>-->
    <!--</bean>-->

    <!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
    <bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
        <!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
        <property name="targetConnectionFactory" ref="targetConnectionFactory"/>
    </bean>



    <!--这个是队列目的地，点对点的-->
    <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>queue1</value>
        </constructor-arg>
    </bean>
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
        <property name="connectionFactory" ref="connectionFactory"/>
    </bean>
    <!--这个是主题目的地，一对多的-->
    <!--<bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic">-->
        <!--<constructor-arg value="topic"/>-->
    <!--</bean>-->




    <!--我们在配置一个MessageListenerContainer的时候有三个属性必须指定，
    一个是表示从哪里监听的ConnectionFactory；一个是表示监听什么的Destination；
    一个是接收到消息以后进行消息处理的MessageListener
    Spring一共为我们提供了两种类型的MessageListenerContainer，SimpleMessageListenerContainer和DefaultMessageListenerContainer。
    DefaultMessageListenerContainer会动态的适应运行时需要，并且能够参与外部的事务管理。
    它很好的平衡了对JMS提供者要求低、先进功能如事务参与和兼容Java EE环境。
    -->

    <!--&lt;!&ndash; 消息监听器 &ndash;&gt;-->
    <bean id="consumerMessageListener" class="service.messageListener.ConsumerMessageListener"/>
    <!-- 消息监听容器 -->
    <bean id="jmsContainer"        class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="destination" ref="queueDestination" />
        <property name="messageListener" ref="consumerMessageListener" />
        <property name="sessionTransacted" value="true"/>
    </bean>

    <!-- 消息监听器2 -->
    <!--<bean id = "awareMessageListener" class="service.sessionAwareMessageListener.ConsumerSessionAwareMessageListener"/>-->
    <!--<bean id="awareListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">-->
        <!--<property name="messageListener" ref="awareMessageListener"/>-->
        <!--<property name="connectionFactory" ref="connectionFactory"/>-->
        <!--<property name="destination" ref="queueDestination"/>-->
    <!--</bean>-->

    <!-- 消息监听器3 -->
    <!--<bean id="consumerListener" class="service.consumerMessageAdapter.ConsumerListener"/>-->
    <!--<bean id="messageAdapter" class="org.springframework.jms.listener.adapter.MessageListenerAdapter">-->
        <!--<property name="delegate" ref="consumerListener"/>-->
        <!--<property name="defaultListenerMethod" value="getMessage"/>-->
        <!--<property name="defaultResponseDestination" ref="queueDestination"/>-->
     <!--</bean>-->
    <!--<bean id="messageAdapterCpntainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">-->
        <!--<property name="messageListener" ref="messageAdapter"/>-->
        <!--<property name="connectionFactory" ref="connectionFactory"/>-->
        <!--<property name="destination" ref="queueDestination"/>-->
    <!--</bean>-->

    <!-- 消息监听器  发送对象 -->
    <!--<bean id="email" class="service.MessageConverter.Email"/>-->
    <!--<bean id="messageListener3" class="service.MessageConverter.ConsumerListener3"></bean>-->
    <!--<bean id="prodeucerServiceImpl3" class="service.MessageConverter.ProdeucerServiceImpl3"/>-->
    <!--<bean id="jmsContainer3"        class="org.springframework.jms.listener.DefaultMessageListenerContainer">-->
        <!--<property name="connectionFactory" ref="connectionFactory" />-->
        <!--<property name="destination" ref="queueDestination" />-->
        <!--<property name="messageListener" ref="messageListener3" />-->
    <!--</bean>-->
    <!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
    <!--<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">-->
        <!--&lt;!&ndash; 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 &ndash;&gt;-->
        <!--<property name="connectionFactory" ref="connectionFactory"/>-->
        <!--<property name="messageConverter" ref="emailConvert"/>-->
    <!--</bean>-->
    <!-- 消息监听器3 adapter收到对象信息-->
    <!--<bean id="emailConvert" class="service.MessageConverter.EmailMessageConverter"/>-->
    <!--<bean id="consumerListener" class="service.consumerMessageAdapter.ConsumerListener"/>-->

    <!--<bean id="messageAdapter" class="org.springframework.jms.listener.adapter.MessageListenerAdapter">-->
        <!--<property name="delegate" ref="consumerListener"/>-->
        <!--<property name="defaultListenerMethod" value="getEmail"/>-->
        <!--<property name="messageConverter" ref="emailConvert"/>-->
    <!--</bean>-->
    <!--<bean id="messageAdapterCpntainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">-->
        <!--<property name="messageListener" ref="messageAdapter"/>-->
        <!--<property name="connectionFactory" ref="connectionFactory"/>-->
        <!--<property name="destination" ref="queueDestination"/>-->
    <!--</bean>-->

</beans>